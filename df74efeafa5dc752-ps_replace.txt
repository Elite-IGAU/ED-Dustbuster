Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[6];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float2 v2 : TEXCOORD2,
  float4 v3 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  o0.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xy          2     NONE   float   xy  
// SV_Position              0   xyzw        3      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 5
mul r0.x, v0.w, cb0[2].w
mul r1.xy, cb0[2].xxxx, cb0[4].zwzz
mov r1.z, -r1.x
mad r0.xy, r0.xxxx, r1.yzyy, v2.xyxx
mad r0.zw, -r1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), r0.xxxy
mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
sample r1.xyzw, r1.xyxx, t0.xyzw, s0
sample r2.xyzw, r0.zwzz, t0.xyzw, s0
mul r3.xyz, cb0[1].xyzx, cb0[5].xyzx
mul r0.zw, r2.xxxy, r3.xxxy
sample r2.xyzw, r0.xyxx, t0.xyzw, s0
mul r1.x, r3.y, r2.y
mul r1.x, r1.x, cb0[3].y
mad r0.w, r0.w, cb0[3].x, r1.x
mul r0.z, r0.z, cb0[4].y
mul r1.xy, r1.yzyy, r3.yzyy
mad r2.y, r1.x, cb0[3].z, r0.w
mad r1.xz, -cb0[4].zzwz, cb0[2].xxxx, r0.xxyx
mad r0.xy, cb0[4].zwzz, cb0[2].xxxx, r0.xyxx
sample r4.xyzw, r0.xyxx, t0.xyzw, s0
mul r0.x, r3.z, r4.z
mul r0.x, r0.x, cb0[2].y
mad r2.z, r1.y, cb0[2].z, r0.x
sample r1.xyzw, r1.xzxx, t0.xyzw, s0
mul r0.x, r3.x, r1.x
mad r2.x, r0.x, cb0[4].x, r0.z
mul r0.xyz, r2.xyzx, l(5.000000, 5.000000, 5.000000, 0.000000)
dp3 r0.w, cb0[0].xyzx, v0.xyzx
add_sat r0.w, r0.w, l(0.200000)
mul r0.w, r0.w, cb0[1].w
mul r0.xyz, r0.xyzx, r0.wwww
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v1.xyzx
dp3 r0.w, -r1.xyzx, v0.xyzx
mul r0.w, |r0.w|, |r0.w|
mul o0.xyz, r0.wwww, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
